function k(){}const z=t=>t;function x(t,n){for(const e in n)t[e]=n[e];return t}function w(t){return t()}function A(){return Object.create(null)}function v(t){t.forEach(w)}function F(t){return typeof t=="function"}function M(t,n){return t!=t?n==n:t!==n||t&&typeof t=="object"||typeof t=="function"}function P(t){return Object.keys(t).length===0}function d(t,...n){if(t==null){for(const c of n)c(void 0);return k}const e=t.subscribe(...n);return e.unsubscribe?()=>e.unsubscribe():e}function S(t){let n;return d(t,e=>n=e)(),n}function U(t,n,e){t.$$.on_destroy.push(d(n,e))}function B(t,n,e,c){if(t){const r=p(t,n,e,c);return t[0](r)}}function p(t,n,e,c){return t[1]&&c?x(e.ctx.slice(),t[1](c(n))):e.ctx}function C(t,n,e,c){return t[2],n.dirty}function D(t,n,e,c,r,y){if(r){const m=p(n,e,c,y);t.p(m,r)}}function G(t){if(t.ctx.length>32){const n=[],e=t.ctx.length/32;for(let c=0;c<e;c++)n[c]=-1;return n}return-1}function H(t,n,e){return t.set(e),n}let a;function l(t){a=t}function b(){if(!a)throw new Error("Function called outside component initialization");return a}function I(t){b().$$.on_mount.push(t)}function J(t){b().$$.after_update.push(t)}function K(t,n){const e=t.$$.callbacks[n.type];e&&e.slice().forEach(c=>c.call(this,n))}const u=[],_=[];let s=[];const h=[],g=Promise.resolve();let f=!1;function E(){f||(f=!0,g.then(O))}function L(){return E(),g}function j(t){s.push(t)}const i=new Set;let o=0;function O(){if(o!==0)return;const t=a;do{try{for(;o<u.length;){const n=u[o];o++,l(n),q(n.$$)}}catch(n){throw u.length=0,o=0,n}for(l(null),u.length=0,o=0;_.length;)_.pop()();for(let n=0;n<s.length;n+=1){const e=s[n];i.has(e)||(i.add(e),e())}s.length=0}while(u.length);for(;h.length;)h.pop()();f=!1,i.clear(),l(t)}function q(t){if(t.fragment!==null){t.update(),v(t.before_update);const n=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,n),t.after_update.forEach(j)}}function N(t){const n=[],e=[];s.forEach(c=>t.indexOf(c)===-1?n.push(c):e.push(c)),e.forEach(c=>c()),s=n}export{C as A,j as a,J as b,U as c,_ as d,H as e,P as f,a as g,A as h,F as i,O as j,l as k,N as l,w as m,k as n,I as o,u as p,E as q,v as r,M as s,L as t,z as u,K as v,S as w,B as x,D as y,G as z};
